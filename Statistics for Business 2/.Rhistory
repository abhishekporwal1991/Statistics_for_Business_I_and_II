```{r echo=FALSE. Load_Data}
Train = read.csv("train.csv")
Test  = read.csv("test.csv")
summary(Train)
str(Train)
summary(Test)
str(Test)
```
```{r echo=FALSE}
Train$DateNTime = as.POSIXct(as.character(Train$datetime))         # Converting factor in date format
Train$Date = strftime(Train$DateNTime, format = "%m/%d/%Y")
Train$Time = strftime(Train$DateNTime, format = "%H:%M:%S")
Train$Time_Factor = as.factor(Train$Time)
str(Train)
tail(Train)
```
```{r echo=FALSE, Visualization, fig.width=9, fig.height=11}
Train$Year = year(Train$datetime)
Train$Month = month(Train$datetime)
#Train$Date_Factor = as.POSIXct(Train$Date)
Year2013 = subset(Train, Train$Year == "2013")
July_2013 = subset(Year2013 , Month == "7")
EC_July_2013 = sum(July_2013$electricity_consumption)
Aug_2013 = subset(Year2013 , Month == "8")
EC_Aug_2013 = sum(Aug_2013$electricity_consumption)
Sept_2013 = subset(Year2013 , Month == "9")
EC_Sept_2013 = sum(Sept_2013$electricity_consumption)
Oct_2013 = subset(Year2013 , Month == "10")
EC_Oct_2013 = sum(Oct_2013$electricity_consumption)
Nov_2013 = subset(Year2013 , Month == "11")
EC_Nov_2013 = sum(Nov_2013$electricity_consumption)
Dec_2013 = subset(Year2013 , Month == "12")
EC_Dec_2013 = sum(Dec_2013$electricity_consumption)
#Monthly_Consump_2013 = sapply(X$Month, function(x) )
#str(x)
pJuly13 = ggplot(July_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -July 2013") + ylab("Consumption in Month")
pAug13 = ggplot(Aug_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -August 2013") + ylab("Consumption in Month")
pSept13 = ggplot(Sept_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -September 2013") + ylab("Consumption in Month")
pOct13 = ggplot(Oct_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -October 2013") + ylab("Consumption in Month")
pNov13 = ggplot(Nov_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -November 2013") + ylab("Consumption in Month")
pDec13 = ggplot(Dec_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -Dec 2013") + ylab("Consumption in Month")
grid.arrange(pJuly13,pAug13,pSept13,pOct13,pNov13,pDec13, ncol = 2)
```
```{r echo=FALSE, Exercise}
date.hour=strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S")
date=c("26/10/2016")
time=c("19:51:30")
day<-paste(date,"T", time)
day.time1=as.POSIXct(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time1
day.time1$year
day.time2=as.POSIXlt(day,format="%d/%m/%Y T %H:%M:%S",tz="Europe/Paris")
day.time2
day.time2$year
```
```{r echo=FALSE, More visualization}
str(Train)
ggplot(Train, aes(x=temperature, y=electricity_consumption, fill = var2)) +
geom_boxplot(position = "identity")
ggplot(Train, aes(x=temperature, y=electricity_consumption)) +
geom_point()
ggplot(Train, aes(x=electricity_consumption)) +
geom_histogram(binwidth = 30, color="black", fill="#993366")
ggplot(Train, aes(x=pressure, y=electricity_consumption)) +
geom_point()
ggplot(Train, aes(x=var2, y=electricity_consumption, fill=var2)) +
geom_point()
cor(Train$electricity_consumption, Train$temperature)
cor(Train$electricity_consumption, Train$pressure)
```
```{r echo=FALSE, Correlation}
x1 = c("temperature", "var1", "electricity_consumption")
x2 = c("pressure","windspeed", "electricity_consumption")    # Var2 is categorical variable
ggpairs(Train[,x1])
ggpairs(Train[,x2])
```
Correlation coefficient bewteen differnt variables and the electricity consumption.
|Variable Name        | r-value (Correlation with
electricity consuption)|
|---------------------|----------------------------|
|temperature          |           -0.117           |
|var1                 |            0.134           |
|pressure             |            0.000907        |
|windspeed            |           -0.239           |
```{r echo=FALSE}
ggplot(Train, aes(x=temperature, y=electricity_consumption)) +
geom_point()
```
This plot looks over plotted. So we are putting some trendline to see the general trend in electricity consumption.
```{r echo=FALSE, fig.width=9, fig.height=11}
ggplot(Train, aes(x=temperature, y=electricity_consumption)) +
geom_point(color = "#993366", alpha = 0.25) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs=0.5), color = 'black') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs=0.9), color = 'black')
```
As the temperature is increasing the energy consumption seems to be decreasing.
```{r echo=FALSE. fig.width = 9, fig.height = 11}
ggplot(Train, aes(x=windspeed, y=electricity_consumption)) +
geom_point(color ="#993366", alpha =0.25)
ggplot(Train, aes(x=pressure, y=electricity_consumption)) +
geom_point(color = "#993366", alpha = 0.25) +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.5), color = "black") +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.9), color = "black")
ggplot(Train, aes(x=var1, y=electricity_consumption)) +
geom_point(color = "#993366", alpha =0.25) +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.5), color ="black") +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.9), color ="black")
```
```{r echo=FALSE}
ggplot(Train, aes(x=electricity_consumption)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 50)
Train$log_EC = log(Train$electricity_consumption)
Train$sqrt_EC = sqrt(Train$electricity_consumption)
ggplot(Train, aes(x=log_EC)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 0.09)
ggplot(Train, aes(x=sqrt_EC)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 1)
```
ggplot(Train, aes(x=sqrt_EC)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 1)
ggplot(Train, aes(x=sqrt_EC)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 1)
ggplot(Train, aes(x=temperature)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 0.09)
ggplot(Train, aes(x=temperature)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 3)
ggplot(Train, aes(x=temperature, fill = var2)) +
geom_density(aes(y=..density..), alpha = 0.5)
ggplot(Train, aes(x=electricity_consumption, fill = var2)) +
geom_density(aes(y=..density..), alpha = 0.5)
ggplot(Train, aes(x=electricity_consumption, fill = var2)) +
geom_density(aes(y=..density..), alpha = 0.1)
ggplot(Train, aes(x=electricity_consumption, fill = var2)) +
geom_density(aes(y=..density..), alpha = 0.4)
LRM_EC = lm(electricity_consumption~., data=Train)
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(randomForest)
Train = read.csv("train.csv")
Test  = read.csv("test.csv")
summary(Train)
str(Train)
summary(Test)
str(Test)
Train$DateNTime = as.POSIXct(as.character(Train$datetime))         # Converting factor in date format
Train$Date = strftime(Train$DateNTime, format = "%m/%d/%Y")
Train$Time = strftime(Train$DateNTime, format = "%H:%M:%S")
Train$Time_Factor = as.factor(Train$Time)
str(Train)
tail(Train)
Train$Year = year(Train$datetime)
Train$Month = month(Train$datetime)
#Train$Date_Factor = as.POSIXct(Train$Date)
Year2013 = subset(Train, Train$Year == "2013")
July_2013 = subset(Year2013 , Month == "7")
EC_July_2013 = sum(July_2013$electricity_consumption)
Aug_2013 = subset(Year2013 , Month == "8")
EC_Aug_2013 = sum(Aug_2013$electricity_consumption)
Sept_2013 = subset(Year2013 , Month == "9")
EC_Sept_2013 = sum(Sept_2013$electricity_consumption)
Oct_2013 = subset(Year2013 , Month == "10")
EC_Oct_2013 = sum(Oct_2013$electricity_consumption)
Nov_2013 = subset(Year2013 , Month == "11")
EC_Nov_2013 = sum(Nov_2013$electricity_consumption)
Dec_2013 = subset(Year2013 , Month == "12")
EC_Dec_2013 = sum(Dec_2013$electricity_consumption)
#Monthly_Consump_2013 = sapply(X$Month, function(x) )
#str(x)
pJuly13 = ggplot(July_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -July 2013") + ylab("Consumption in Month")
pAug13 = ggplot(Aug_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -August 2013") + ylab("Consumption in Month")
pSept13 = ggplot(Sept_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -September 2013") + ylab("Consumption in Month")
pOct13 = ggplot(Oct_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -October 2013") + ylab("Consumption in Month")
pNov13 = ggplot(Nov_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -November 2013") + ylab("Consumption in Month")
pDec13 = ggplot(Dec_2013, aes(x=DateNTime, y=electricity_consumption)) +
geom_line() +
xlab("Month -Dec 2013") + ylab("Consumption in Month")
grid.arrange(pJuly13,pAug13,pSept13,pOct13,pNov13,pDec13, ncol = 2)
str(Train)
ggplot(Train, aes(x=temperature, y=electricity_consumption, fill = var2)) +
geom_boxplot(position = "identity")
ggplot(Train, aes(x=temperature, y=electricity_consumption)) +
geom_point()
ggplot(Train, aes(x=electricity_consumption)) +
geom_histogram(binwidth = 30, color="black", fill="#993366")
ggplot(Train, aes(x=pressure, y=electricity_consumption)) +
geom_point()
ggplot(Train, aes(x=var2, y=electricity_consumption, fill=var2)) +
geom_point()
cor(Train$electricity_consumption, Train$temperature)
cor(Train$electricity_consumption, Train$pressure)
x1 = c("temperature", "var1", "electricity_consumption")
x2 = c("pressure","windspeed", "electricity_consumption")    # Var2 is categorical variable
ggpairs(Train[,x1])
ggpairs(Train[,x2])
ggplot(Train, aes(x=temperature, y=electricity_consumption)) +
geom_point()
ggplot(Train, aes(x=temperature, y=electricity_consumption)) +
geom_point(color = "#993366", alpha = 0.25) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs=0.5), color = 'black') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs=0.9), color = 'black')
ggplot(Train, aes(x=windspeed, y=electricity_consumption)) +
geom_point(color ="#993366", alpha =0.25)
ggplot(Train, aes(x=pressure, y=electricity_consumption)) +
geom_point(color = "#993366", alpha = 0.25) +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.5), color = "black") +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.9), color = "black")
ggplot(Train, aes(x=var1, y=electricity_consumption)) +
geom_point(color = "#993366", alpha =0.25) +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.5), color ="black") +
geom_line(stat = "summary", fun.y = quantile, fun.args = list(probs=0.9), color ="black")
ggplot(Train, aes(x=electricity_consumption)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 50)
Train$log_EC = log(Train$electricity_consumption)
Train$sqrt_EC = sqrt(Train$electricity_consumption)
ggplot(Train, aes(x=log_EC)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 0.09)
ggplot(Train, aes(x=sqrt_EC)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 1)
ggplot(Train, aes(x=temperature)) +
geom_histogram(color = "black", fill = "#993366", binwidth = 3)
ggplot(Train, aes(x=temperature, fill = var2)) +
geom_density(aes(y=..density..), alpha = 0.5)
ggplot(Train, aes(x=electricity_consumption, fill = var2)) +
geom_density(aes(y=..density..), alpha = 0.4)
LRM_EC = lm(electricity_consumption~., data=Train)
LRM_EC = lm(electricity_consumption~., data=Train)
View(Train)
str(Train)
LRM_EC = lm(electricity_consumption~ temperature + var1 + pressure + windspeed + var2, data=Train)
summary(LRM_EC)
library(memisc)
m1 = lm(electricity_consumption~temperature, data=Train)
m2 = update(m1,~.+var1)
mtable(m1,m2)
m3 = update(m1,~.+pressure)
mtable(m1,m2,m3)
m4 = update(m1,~.+windspeed)
mtable(m1,m2,m3,m4)
m5 = update(m1,~.+var2)
mtable(m1,m2,m3,m4,m5)
data("AirPassengers")
str(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg = lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers, FUN = mean))
boxplot(AirPassengers~cycle(AirPassengers))
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(randomForest)
library(memisc)
Train = read.csv("train.csv")
Test  = read.csv("test.csv")
summary(Train)
str(Train)
summary(Test)
str(Test)
plot(Train)
data("AirPassengers")
data(AirPassengers)
cycle(AirPassengers)
frequency(AirPassengers)
class(AirPassengers)
plot(AirPassengers)
ts.plot(AirPassengers)
?cycle
deltat(AirPassengers)
acf(AirPassengers)
pacf(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
plot(aggregate(AirPassengers, fun=mean))
plot(aggregate(AirPassengers, FUN=mean))
boxplot(AirPassengers)
boxplot(AirPassengers~cycle(AirPassengers) )
?time
adf.test(diff(log(AirPassengers)), alternative = "stationary", k=0)
install.packages("tseries")
library(tseries)
adf.test(diff(log(AirPassengers)), alternative = "stationary", k=0)
?adf.test
x =log(AirPassengers)
x
AirPassengers
plot(x)
par(mfrow(1,2))
library(gridExtra)
p1= plot(AirPassengers)
p2= plot(x)
grid.arrange(p1,p2, ncol=1)
grid.arrange(p1,p2, ncol=2
grid.arrange(p1,p2, ncol=2)
grid.arrange(p1,p2, ncol=2)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(AirPassengers)
plot(x)
par(mfcol=c(1,2))
plot(AirPassengers)
plot(x)
par(mfcol=c(1,1))
plot(x)
par(mfcol=c(2,1))
plot(AirPassengers)
plot(x)
par(mfcol=c(1,1))
plot(x)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(AirPassengers)
plot(x)
par(mfrow=c(1,1))
?mfrow
?par
y= diff(log(AirPassengers))
plot(y)
?diff
y
x
4.744932-4.718499
4.976734-4.744932
4.976734-4.718499
acf(AirPassengers)
pacf(AirPassengers)
acf(y)
pacf(y)
fit = arima(log(AirPassengers)r)
fit = arima(log(AirPassengers))
summary(fit)
fit
fit = arima(log(AirPassengers), c(0,1,1))
fit
fit = arima(log(AirPassengers), c(0,1,1), seasonal = list(order = c(0,1,1)), period = 12)
fit = arima(log(AirPassengers), c(0,1,1), seasonal = list(order = c(0,1,1)), period = 12)
fit = arima(log(AirPassengers), c(0,1,1), seasonal = list(order = c(0,1,1), period = 12)))
fit = arima(log(AirPassengers), c(0,1,1), seasonal = list(order = c(0,1,1), period = 12))
fit
pred = predict(fit, n.ahead = 10*12)
pred
ts.plot(AirPassengers, 2.718^pred$pred, log=  "y", lty = c(1,3))
?ts.plot
library(ggplot2)
library(plyr)
library(dplyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(randomForest)
library(memisc)
Train = read.csv("train.csv")
Test  = read.csv("test.csv")
summary(Train)
str(Train)
summary(Test)
str(Test)
class(Train)
plot(Train$electricity_consumption)
ts.plot(Train$electricity_consumption)
time(Train)
x = ts(trai)
x = ts(Train)
class(x)
str(x)
start(x)
end(x)
frequency(x)
cycle(x)
?ts
Train$DateNTime = as.POSIXlt(as.character(Train$datetime))         # Converting factor in date format
str(Train)
data(weather)
log(100)
# This is how you declare a set of numbers
# In this case, from 1 to 10.
position <- c(1:10)
# Explicitly declare the first 10 primes
primes <- c(2,3,5,7,11,13,17,19,23,29)
# Run some stats on these primes
myMean <- mean(primes)
cat("The mean of primes is", myMean,
"\n") # This is an end-of-line character
mySD <- sd(primes)
cat("The SD of primes is",
round(mySD, 2), "\n")
# Even get a correlation between the rank order of
# the prime and its magnitude
cor_np <- cor(position,primes)
cat("Correlation of position vs primes is",
round(cor_np, 2), "\n")
# Here's a rudimentary plot
plot(position,primes,
pch=20,
col=colors()[30:40],
main="Colourful Primes")
# Or, how about a regression fit
# through the primes? Don't worry
# if you don't figure this out now!
lmFit <- lm(primes ~ position)
abline(lmFit,
col="red")
print(summary(lmFit))
a =c(1,3,5,7)
b = c(2,4,5,8)
d = c(1:8)
union(a,b)
b-a
d^2
sq(d)
a*b
load(mtcars)
Load(mtcars)
?load
load(mtcars)
summary(mtcars)
economy = mtcars$mpg
economy = mtcars$mpg
cylinders = mtcars$cyl
meanEco = mean(economy)
sdEco   = sd(economy)
meanEco
sdEco
plot(economy,cylinders)
printf(meadin(cylinders))
printf(median(cylinders))
?print
print(median(cylinders))
cat(median(cylinders))
?cat
rainbow <- c("violet", "indigo", "blue", "green", "orange", "red")
rainbow[7]
rainbow[-7]
rainbow[-6]
rainbow[1:5]
rainbow[1,2,3,4,5]
rainbow + "yellow"
rainbow[7] = "yellow"
rainbow
x = "yellow"
rainbow + x
boxplot(mtcars$wt, horizontal = TRUE)
sumWights = summary(mtcars$wt)
sumWights
IQR = sumWights[5] - sumWights[2]
IQR - 1.5*sumWights[2]
str(sumWights)
IQR - 1.5*sumWights[1,2]
sumWights[2]-1.5*IQR
sumWights[5]+1.5*IQR
table(mtcars$wt > (sumWights[5]+1.5*IQR))
table(mtcars$wt < (sumWights[2]-1.5*IQR))
source('D:/Study/Data Science/Statistics for Business 2/1-Data.R')
plot(mtcars$mpg,mtcars$cyl)
plot(mtcars$mpg)
hist(mtcars$mpg)
hist(mtcars$mpg, col = color()[10:30])
hist(mtcars$mpg, col = colors()[10:30])
hist(mtcars$mpg, col = colors()[100:130])
mean(mtcars$wt)
?mtcars
hist(mtcars$wt)
skewness(mtcars$wt)
skewness(mtcars$wt)
?skewness
?Skewness
library(e1071)
skewness(mtcars$wt)
?window
?ts.plot
setwd("D:/Study/Data Science/Statistics for Business 2")
# Read in the list of risks
RiskList <- read.csv("RiskList.csv", header=TRUE)
# Number of risks in the list
numRisks <- nrow(RiskList)
# No. of Rounds for the Monte Carlo simulation
numRounds <- 1000
View(RiskList)
source('D:/Study/Data Science/Statistics for Business 2/MonteCarlo.R')
